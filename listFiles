import fs from 'fs/promises';
import path from 'path';
import chalk from 'chalk';

// Fonction récursive pour afficher les sous-fichiers
const displaySubFiles = (subFiles, level = 0) => {
    if (!subFiles || Object.keys(subFiles).length === 0) return;
    
    const indent = '   '.repeat(level);
    const treeChar = level === 0 ? '   └─' : '   ├─';
    
    for (const [key, value] of Object.entries(subFiles)) {
        if (key !== 'NoSubFiles') {
            console.log(chalk.green(`${indent}${treeChar} ${key}: ${value.content}`));
            console.log(chalk.gray(`${indent}      Créé le: ${new Date(value.createdAt).toLocaleString()}`));
            console.log(chalk.gray(`${indent}      Dernière modification: ${new Date(value.lastModified).toLocaleString()}`));
            
            // Afficher récursivement les sous-sous-fichiers
            if (value.subFiles && Object.keys(value.subFiles).length > 0) {
                displaySubFiles(value.subFiles, level + 1);
            }
        }
    }
};

export const listFiles = async () => {
    try {
        const dataDir = path.join('src', 'data');
        
        // Lire tous les fichiers du dossier data
        const files = await fs.readdir(dataDir);
        
        console.log(chalk.cyan.bold('\n▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰'));
        console.log(chalk.cyan.bold('▰▰▰▰                ◀ Structure des fichiers ▶                ▰▰▰▰'));
        console.log(chalk.cyan.bold('▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰    ▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰\n'));
        
        for (const file of files) {
            if (file.endsWith('.json')) {
                const filePath = path.join(dataDir, file);
                const content = await fs.readFile(filePath, 'utf-8');
                const jsonData = JSON.parse(content);
                
                // Afficher le titre du fichier
                console.log(chalk.yellow(`📁 ${jsonData.metadata.title}`));
                console.log(chalk.gray(`   Créé le: ${new Date(jsonData.metadata.createdAt).toLocaleString()}`));
                console.log(chalk.gray(`   Dernière modification: ${new Date(jsonData.metadata.lastModified).toLocaleString()}`));
                
                // Afficher le contenu
                console.log(chalk.blue(`   Contenu: ${jsonData.content}`));
                
                // Afficher les sous-fichiers et sous-sous-fichiers
                if (jsonData.subFiles && Object.keys(jsonData.subFiles).length > 0) {
                    console.log(chalk.green('   Sous-fichiers:'));
                    displaySubFiles(jsonData.subFiles);
                }
                
                console.log(chalk.gray('   ──────────────────────────────────────────────────────────────'));
            }
        }
    } catch (error) {
        console.error(chalk.red('Erreur lors de la lecture des fichiers:', error.message));
    }
}; 